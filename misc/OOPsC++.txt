OOPs Concept through C++
1. Objects are real world entity, that has state(data) and behaviour(functionality). Objects are the instances of class and all the entities of the class can be accessed using object.
2. Objects are runTime entity created at runTime.
3. Class is the Template or BluePrint from which Objects are created. It can have Fields, methods, constructors, etc.
4. Constructor is a special method of the class which is automatically invoked when the object is created. It is generally used to initilize the instance variables. Two Types: Default (W/O parameters) and Parametrised constructors.
5. Destructor Worsks opposite to the constructor it destroys the objects. It is called after the entire program terminates or the object goes out of scope (After the main function is executed).
6. Destructor can be defined only once in the class contrary to Constructor execution.
7. Order or Execution : Constructor Exec of various objects follows sequential pattern, first object gets its constructor run first. In desctructor whichever Object created last gets destroyed first.
8. This is a keyword(Pointer) that refers to the current instance of the class.  -to pass current object as a parameter to another method. -to refer current class instance variable -It can be used to declare indexers.
9. Static is the keyword/modifier that belongs to the type not instance. so instance is not required to access the static members. MEMORY EFFICIENT - Will not get memory each time when instance is created. THere is only onw copy of static field created in memory and it is shared to all the objects.  Ex: Rate Of Interest in all saving accounts.
10. static variables need to have some storage allocated somewhere., Actually it is not necessary to initialize the static variables, but it is necessary to define them outside the class to allocate memory for them. Only after their definition, can they be initialized and then used in the program.
11. In C++, classes and structs are blueprints that are used to create the instance of a class. Structs are used for lightweight objects such as Rectangle, color, Point, etc. Unlike class, structs in C++ are value type than reference type. It is similar to the class that holds different types of data. Let's see another example of struct where we are using the constructor to initialize data and method to calculate the area of rectangle. struct Rectangle rec=Rectangle(4,6);    If access specifier is not declared explicitly, then by default access specifier will be public. The instance of the structure is known as "Structure variable". VERY LITTLE DIFFERENCE B/Wn STRUCTURE AND CLASS.
12. C++ Enums can be thought of as classes that have fixed set of constants. The C++ enum constants are static and final implicitly.
If a function is defined as a friend function in C++, then the protected and private data of a class can be accessed using the function. For accessing the data, the declaration of a friend function should be done inside the body of a class starting with the keyword friend.
